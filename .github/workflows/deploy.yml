name: Deploy to Digital Ocean Droplet

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH manually
        env:
          DEPLOY_KEY: ${{ secrets.DROPLET_SSH_KEY }}
        run: |
          # Verificar que tenemos los secretos necesarios
          if [ -z "$DEPLOY_KEY" ]; then
            echo "Error: El secreto DROPLET_SSH_KEY no está configurado"
            exit 1
          fi
          
          mkdir -p ~/.ssh
          # 1) Escribir la clave privada al archivo
          printf "%s\n" "$DEPLOY_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # 2) Iniciar ssh-agent
          eval "$(ssh-agent -s)"
          
          # 3) Agregar la clave (asumiendo que NO tiene contraseña)
          echo "Agregando clave SSH al agente..."
          ssh-add ~/.ssh/deploy_key
          
          # 4) Verificar que la clave se agregó correctamente
          if ssh-add -l > /dev/null; then
            echo "✅ Clave SSH agregada correctamente"
          else
            echo "❌ Error al agregar la clave SSH"
            exit 1
          fi
          
          # 5) Confiar en la host key del droplet
          echo "Agregando fingerprint del servidor..."
          ssh-keyscan -H 161.35.97.194 >> ~/.ssh/known_hosts
          
          # Configurar SSH para usar la clave para este host específico
          cat > ~/.ssh/config << EOL
          Host digitalocean
            HostName 161.35.97.194
            User agile-system
            IdentityFile ~/.ssh/deploy_key
            StrictHostKeyChecking no
          EOL
          chmod 600 ~/.ssh/config

      - name: Deploy to Digital Ocean
        run: |
          # Verificar si el directorio del proyecto existe y configurarlo si es necesario
          ssh digitalocean << 'EOF'
            echo "Verificando directorio del proyecto..."
            PROJECT_DIR="$HOME/Sistema-de-Control-y-Gesti-n-de-Proyectos-gile"
            
            if [ ! -d "$PROJECT_DIR" ]; then
              echo "Creando directorio de proyecto..."
              mkdir -p "$PROJECT_DIR"
              cd "$HOME"
              echo "Clonando repositorio por primera vez..."
              git clone https://github.com/khrizenriquez/Sistema-de-Control-y-Gesti-n-de-Proyectos-gile.git
            else
              echo "Directorio del proyecto encontrado. Actualizando código..."
              cd "$PROJECT_DIR"
              git fetch --all
              git reset --hard origin/main
            fi
            
            # Verificar si existe el script de entorno
            if [ -f "$PROJECT_DIR/start-environment.sh" ]; then
              cd "$PROJECT_DIR"
              echo "Ejecutando script de despliegue desde la raíz..."
              chmod +x start-environment.sh
              ./start-environment.sh --no-pgadmin --build
            elif [ -d "$PROJECT_DIR/infra/podman" ]; then
              cd "$PROJECT_DIR/infra/podman"
              echo "Ejecutando script de despliegue desde infra/podman..."
              if [ -f "../../start-environment.sh" ]; then
                chmod +x ../../start-environment.sh
                ../../start-environment.sh --no-pgadmin --build
              elif [ -f "./start-environment.sh" ]; then
                chmod +x ./start-environment.sh
                ./start-environment.sh --no-pgadmin --build
              else
                echo "Error: No se encontró el script start-environment.sh"
                find "$PROJECT_DIR" -name "start-environment.sh" -type f
                exit 1
              fi
            else
              echo "Error: No se encontró la estructura esperada del proyecto"
              ls -la "$PROJECT_DIR"
              exit 1
            fi
          EOF
          
      - name: Cleanup SSH files
        if: always()
        run: |
          # Limpiar archivos SSH sensibles
          ssh-agent -k || true
          rm -f ~/.ssh/deploy_key
          rm -f ~/.ssh/config
