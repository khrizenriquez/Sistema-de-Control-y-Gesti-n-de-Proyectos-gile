"""Add project lifecycle fields and tables

Revision ID: add_project_lifecycle_002
Revises: 01
Create Date: 2024-12-19 10:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel
from datetime import datetime


# revision identifiers, used by Alembic.
revision = 'add_project_lifecycle_002'
down_revision = '01'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Añadir nuevas columnas a la tabla projects
    op.add_column('projects', sa.Column('status', sa.String(), nullable=True))
    op.add_column('projects', sa.Column('priority', sa.String(), nullable=True))
    op.add_column('projects', sa.Column('start_date', sa.DateTime(), nullable=True))
    op.add_column('projects', sa.Column('planned_end_date', sa.DateTime(), nullable=True))
    op.add_column('projects', sa.Column('actual_end_date', sa.DateTime(), nullable=True))
    op.add_column('projects', sa.Column('archived_at', sa.DateTime(), nullable=True))
    op.add_column('projects', sa.Column('completion_percentage', sa.Float(), nullable=True))
    op.add_column('projects', sa.Column('budget', sa.Float(), nullable=True))
    op.add_column('projects', sa.Column('actual_cost', sa.Float(), nullable=True))
    op.add_column('projects', sa.Column('tags', sa.String(), nullable=True))
    op.add_column('projects', sa.Column('client_name', sa.String(), nullable=True))
    op.add_column('projects', sa.Column('project_manager_id', sa.String(), nullable=True))
    
    # Establecer valores por defecto para registros existentes
    op.execute("UPDATE projects SET status = 'planning' WHERE status IS NULL")
    op.execute("UPDATE projects SET priority = 'medium' WHERE priority IS NULL")
    op.execute("UPDATE projects SET completion_percentage = 0.0 WHERE completion_percentage IS NULL")
    
    # Agregar restricción para validar los estados permitidos
    op.execute("""
        ALTER TABLE projects 
        ADD CONSTRAINT check_project_status 
        CHECK (status IN ('planning', 'active', 'on_hold', 'completed', 'cancelled', 'archived', 'obsolete'))
    """)
    
    # Agregar restricción para validar las prioridades permitidas  
    op.execute("""
        ALTER TABLE projects 
        ADD CONSTRAINT check_project_priority 
        CHECK (priority IN ('low', 'medium', 'high', 'critical'))
    """)
    
    # Añadir constraint no nulo después de establecer valores por defecto
    op.alter_column('projects', 'status', nullable=False)
    op.alter_column('projects', 'priority', nullable=False)
    op.alter_column('projects', 'completion_percentage', nullable=False)
    
    # Crear foreign key para project_manager_id
    op.create_foreign_key('fk_projects_project_manager', 'projects', 'user_profiles', ['project_manager_id'], ['id'])
    
    # Añadir nuevas columnas a la tabla project_members
    op.add_column('project_members', sa.Column('joined_at', sa.DateTime(), nullable=True))
    op.add_column('project_members', sa.Column('left_at', sa.DateTime(), nullable=True))
    op.add_column('project_members', sa.Column('is_active', sa.Boolean(), nullable=True))
    
    # Establecer valores por defecto para registros existentes
    op.execute(f"UPDATE project_members SET joined_at = '{datetime.utcnow()}' WHERE joined_at IS NULL")
    op.execute("UPDATE project_members SET is_active = true WHERE is_active IS NULL")
    
    # Añadir constraint no nulo después de establecer valores por defecto
    op.alter_column('project_members', 'joined_at', nullable=False)
    op.alter_column('project_members', 'is_active', nullable=False)
    
    # Crear tabla project_milestones
    op.create_table('project_milestones',
        sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('due_date', sa.DateTime(), nullable=False),
        sa.Column('completed_at', sa.DateTime(), nullable=True),
        sa.Column('is_completed', sa.Boolean(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Crear tabla project_activities
    op.create_table('project_activities',
        sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column('project_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('activity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('extra_data', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user_profiles.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Añadir assignee_id y cover_color a cards si no existen
    try:
        op.add_column('cards', sa.Column('assignee_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
        op.add_column('cards', sa.Column('cover_color', sqlmodel.sql.sqltypes.AutoString(), nullable=True))
        op.create_foreign_key('fk_cards_assignee', 'cards', 'user_profiles', ['assignee_id'], ['id'])
    except:
        # Las columnas ya pueden existir
        pass
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Eliminar restricciones de validación
    op.execute("ALTER TABLE projects DROP CONSTRAINT IF EXISTS check_project_status")
    op.execute("ALTER TABLE projects DROP CONSTRAINT IF EXISTS check_project_priority")
    
    # Eliminar tablas nuevas
    op.drop_table('project_activities')
    op.drop_table('project_milestones')
    
    # Eliminar columnas añadidas a cards
    try:
        op.drop_constraint('fk_cards_assignee', 'cards', type_='foreignkey')
        op.drop_column('cards', 'cover_color')
        op.drop_column('cards', 'assignee_id')
    except:
        pass
    
    # Eliminar columnas añadidas a project_members
    op.drop_column('project_members', 'is_active')
    op.drop_column('project_members', 'left_at')
    op.drop_column('project_members', 'joined_at')
    
    # Eliminar foreign key y columnas añadidas a projects
    op.drop_constraint('fk_projects_project_manager', 'projects', type_='foreignkey')
    op.drop_column('projects', 'project_manager_id')
    op.drop_column('projects', 'client_name')
    op.drop_column('projects', 'tags')
    op.drop_column('projects', 'actual_cost')
    op.drop_column('projects', 'budget')
    op.drop_column('projects', 'completion_percentage')
    op.drop_column('projects', 'archived_at')
    op.drop_column('projects', 'actual_end_date')
    op.drop_column('projects', 'planned_end_date')
    op.drop_column('projects', 'start_date')
    op.drop_column('projects', 'priority')
    op.drop_column('projects', 'status')
    
    # ### end Alembic commands ### 